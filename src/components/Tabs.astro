---
export interface Tab {
  id: string;
  label: string;
}

export interface Props {
  tabs: Tab[];
}

const { tabs } = Astro.props;
---

<div
  class="my-8 mb-20 overflow-hidden rounded-lg border border-stone-200 dark:border-stone-800"
  data-tabs
>
  <div
    class="flex flex-wrap gap-1 border-b border-stone-200 bg-stone-100 p-1 dark:border-stone-800 dark:bg-stone-900"
    role="tablist"
  >
    {
      tabs.map((tab, index) => (
        <button
          role="tab"
          aria-selected={index === 0 ? "true" : "false"}
          data-selected={index === 0 ? "true" : "false"}
          aria-controls={`panel-${index}`}
          id={`tab-${index}`}
          class="cursor-pointer rounded-md border-0 bg-transparent px-4 py-2 text-sm font-medium transition-all duration-200 ease-in-out hover:bg-stone-50 hover:text-stone-600 data-[selected=true]:bg-stone-50 data-[selected=true]:text-stone-700 dark:hover:bg-stone-950 dark:hover:text-stone-50 dark:data-[selected=true]:bg-stone-950 dark:data-[selected=true]:text-stone-200"
          data-tab={index.toString()}
        >
          {tab.label}
        </button>
      ))
    }
  </div>

  <div class="bg-[var(--color-bg)]">
    <div
      role="tabpanel"
      id="panel-0"
      aria-labelledby="tab-0"
      class="tabs-panel active"
      data-panel="0"
    >
      <div class="p-8 md:p-12">
        <slot name="tab1" />
      </div>
      <slot name="code1" />
    </div>
    <div
      role="tabpanel"
      id="panel-1"
      aria-labelledby="tab-1"
      class="tabs-panel"
      data-panel="1"
      hidden
    >
      <div class="p-8 md:p-12">
        <slot name="tab2" />
      </div>
      <slot name="code2" />
    </div>
    <div
      role="tabpanel"
      id="panel-2"
      aria-labelledby="tab-2"
      class="tabs-panel"
      data-panel="2"
      hidden
    >
      <div class="p-8 md:p-12">
        <slot name="tab3" />
      </div>
      <slot name="code3" />
    </div>
    <div
      role="tabpanel"
      id="panel-3"
      aria-labelledby="tab-3"
      class="tabs-panel"
      data-panel="3"
      hidden
    >
      <div class="p-8 md:p-12">
        <slot name="tab4" />
      </div>
      <slot name="code4" />
    </div>
  </div>
</div>

<style>
  .tabs-panel {
    display: none;
  }

  .tabs-panel.active {
    display: block;
  }

  button.active {
    /* background-color: var(--color-bg);
    color: var(--color-text-primary);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05); */
  }
</style>

<script>
  function initTabs() {
    const containers = document.querySelectorAll("[data-tabs]");

    containers.forEach((container) => {
      const buttons = container.querySelectorAll("[data-tab]");
      const panels = container.querySelectorAll("[data-panel]");

      buttons.forEach((button) => {
        button.addEventListener("click", () => {
          const tabId = button.getAttribute("data-tab");

          // Deactivate all buttons and panels
          buttons.forEach((btn) => {
            btn.classList.remove("active");
            btn.setAttribute("aria-selected", "false");
            btn.setAttribute("data-selected", "false");
          });

          panels.forEach((panel) => {
            panel.classList.remove("active");
            panel.setAttribute("hidden", "");
          });

          // Activate clicked button and corresponding panel
          button.classList.add("active");
          button.setAttribute("aria-selected", "true");
          button.setAttribute("data-selected", "true");

          const targetPanel = container.querySelector(
            `[data-panel="${tabId}"]`,
          );
          if (targetPanel) {
            targetPanel.classList.add("active");
            targetPanel.removeAttribute("hidden");
          }
        });
      });
    });
  }

  // Initialize on page load
  initTabs();

  // Re-initialize after page navigation (for Astro view transitions)
  document.addEventListener("astro:page-load", initTabs);
</script>
